#!/usr/bin/env python3
import os
import json
import locale
import sys
import operator
from operator import itemgetter
import re
import reports
import emails


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  sales_table = []
  most_propular = {}

  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$")) #item_price is a number
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    # compile a list for later on put them into pdf
    list = []
    list.append(item["id"])
    list.append(format_car(item["car"]))
    list.append(item["price"])
    list.append(item["total_sales"])
    # adding the list and put it into a larger list sales_table
    sales_table.append(list)
    sales_table = sorted(sales_table, key=itemgetter(3), reverse=True)

    # TODO: also handle most popular car_year
    #extract the year from the car
    counter = 0
    total_sales = 0
    year = format_car(item["car"])
    year = re.search(r"\(....\)", year)
    year = year.group()
    year = year.strip("(")
    year = year.strip(")")
    #counting and adding total_sales
    if most_propular.get(year) is None:
        counter = counter + 1
        most_propular[year] = [counter, item["total_sales"]]
    else:
        countlist = most_propular.get(year)
        counter = countlist[0] + 1
        total_sales = countlist[1] + item["total_sales"]
        most_propular[year] = [counter, total_sales]


  most_propular = sorted(most_propular.items(), key=itemgetter(1), reverse=True)
#  print(most_propular)
#  print(sales_table)
  #adding header to the table
  sales_table.insert(0, ["ID", "Car", "Price", "Total Sales"])

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]), "The {} had the most sales: {}".format(sales_table[1][1], sales_table[1][3]),
      "The most popular year was {} with {} sales".format(most_propular[0][0], most_propular[0][1][1]), sales_table
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  new_summary = summary[0] + '<br/>' + summary[1] + '<br/>' + summary[2] + '<br/>'
  highlight = summary[0] + '\n' + summary[1] + '\n' + summary[2] + '\n'
  print(highlight)
  styles = getSampleStyleSheet()

  # TODO: turn this into a PDF report
  reports.generate("/tmp/car.pdf", "Sales Summary for last month", new_summary, cars_dict_to_table(data))


  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = highlight
  message = emails.generate(sender, receiver, subject, body, "/tmp/car.pdf")
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)
